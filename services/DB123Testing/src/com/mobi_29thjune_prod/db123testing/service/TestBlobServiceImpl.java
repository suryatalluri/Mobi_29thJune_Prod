/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.mobi_29thjune_prod.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobi_29thjune_prod.db123testing.TestBlob;


/**
 * ServiceImpl object for domain model class TestBlob.
 *
 * @see TestBlob
 */
@Service("DB123Testing.TestBlobService")
public class TestBlobServiceImpl implements TestBlobService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestBlobServiceImpl.class);


    @Autowired
    @Qualifier("DB123Testing.TestBlobDao")
    private WMGenericDao<TestBlob, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestBlob, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public TestBlob create(TestBlob testBlob) {
        LOGGER.debug("Creating a new TestBlob with information: {}", testBlob);
        TestBlob testBlobCreated = this.wmGenericDao.create(testBlob);
        return testBlobCreated;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public TestBlob getById(Integer testblobId) throws EntityNotFoundException {
        LOGGER.debug("Finding TestBlob by id: {}", testblobId);
        TestBlob testBlob = this.wmGenericDao.findById(testblobId);
        if (testBlob == null){
            LOGGER.debug("No TestBlob found with id: {}", testblobId);
            throw new EntityNotFoundException(String.valueOf(testblobId));
        }
        return testBlob;
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public TestBlob findById(Integer testblobId) {
        LOGGER.debug("Finding TestBlob by id: {}", testblobId);
        return this.wmGenericDao.findById(testblobId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public TestBlob update(TestBlob testBlob) throws EntityNotFoundException {
        LOGGER.debug("Updating TestBlob with information: {}", testBlob);
        this.wmGenericDao.update(testBlob);

        Integer testblobId = testBlob.getId();

        return this.wmGenericDao.findById(testblobId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public TestBlob delete(Integer testblobId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestBlob with id: {}", testblobId);
        TestBlob deleted = this.wmGenericDao.findById(testblobId);
        if (deleted == null) {
            LOGGER.debug("No TestBlob found with id: {}", testblobId);
            throw new EntityNotFoundException(String.valueOf(testblobId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<TestBlob> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestBlobs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<TestBlob> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestBlobs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table TestBlob to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

